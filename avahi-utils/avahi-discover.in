#!@PYTHON@
# -*-python-*-
# $Id$

# This file is part of avahi.
#
# avahi is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# avahi is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with avahi; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA.

import os
import gtk
import gobject

import avahi, dbus, gobject, sys
from avahi.SimpleGladeApp import SimpleGladeApp

try:
    import dbus.glib
except ImportError, e:
    pass

service_type_browsers = {}
service_browsers = {}


glade_dir = "@interfacesdir@"

class Main_window(SimpleGladeApp):
    def __init__(self, path="avahi-discover.glade", root="main_window", domain=None, **kwargs):
        path = os.path.join(glade_dir, path)
        SimpleGladeApp.__init__(self, path, root, domain, **kwargs)

    def on_tree_view_cursor_changed(self, widget, *args):
        (model, iter) = widget.get_selection().get_selected()
        (name,interface,protocol,type,domain) = self.treemodel.get(iter,1,2,3,4,5)
        if type == None:
            self.info_label.set_markup("<i>No service currently selected.</i>")
            return
        #Asynchronous resolving
        self.server.ResolveService( int(interface), int(protocol), name, type, domain, avahi.PROTO_UNSPEC, reply_handler=self.service_resolved, error_handler=self.print_error)


    def protoname(self,protocol):
        if protocol == avahi.PROTO_INET:
            return "IPv4"
        if protocol == avahi.PROTO_INET6:
            return "IPv6"
            
            
    def siocgifname(self, interface):
        if interface <= 0:
            return "any"
        else:
            return self.server.GetNetworkInterfaceNameByIndex(interface)
                        
    def service_resolved(self, interface, protocol, name, type, domain, host, aprotocol, address, port, txt):
        print "Service data for service '%s' of type '%s' in domain '%s' on %i.%i:" % (name, type, domain, interface, protocol)
        print "\tHost %s (%s), port %i, TXT data: %s" % (host, address, port, str(txt))
        self.update_label(interface, protocol, name, type, domain, host, aprotocol, address, port, str(txt))
        
    def print_error(err):
        print "Error:", str(err)
            
    def new_service(self, interface, protocol, name, type, domain):
        print "Found service '%s' of type '%s' in domain '%s' on %i.%i." % (name, type, domain, interface, protocol)
        if self.zc_types.has_key((interface,protocol,type,domain)) == False:
            self.zc_types[(interface,protocol,type,domain)] = self.insert_row(self.treemodel,self.zc_domains[(interface,protocol,domain)], type, name, interface,None,None,None)
        treeiter = self.insert_row(self.treemodel,self.zc_types[(interface,protocol,type,domain)], name, name, interface,protocol,type,domain)
        self.services_browsed[(interface, protocol, name, type, domain)] = treeiter


    def remove_service(self, interface, protocol, name, type, domain):
        print "Service '%s' of type '%s' in domain '%s' on %i.%i disappeared." % (name, type, domain, interface, protocol)
        self.info_label.set_markup("")
        treeiter=self.services_browsed[(interface, protocol, name, type, domain)]
        parent = self.treemodel.iter_parent(treeiter)
        self.treemodel.remove(treeiter)
        del self.services_browsed[(interface, protocol, name, type, domain)]
        if self.treemodel.iter_has_child(parent) == False:
            treeiter=self.zc_types[(interface,protocol,type,domain)]
            parent = self.treemodel.iter_parent(treeiter)
            self.treemodel.remove(treeiter)
            del self.zc_types[(interface,protocol,type,domain)]
            if self.treemodel.iter_has_child(parent) == False:
                treeiter=self.zc_domains[(interface,protocol,domain)]
                parent = self.treemodel.iter_parent(treeiter)
                self.treemodel.remove(treeiter)
                del self.zc_domains[(interface,protocol,domain)]
                if self.treemodel.iter_has_child(parent) == False:
                    treeiter=self.zc_ifaces[(interface,protocol)]
                    parent = self.treemodel.iter_parent(treeiter)
                    self.treemodel.remove(treeiter)
                    del self.zc_ifaces[(interface,protocol)]

 
    def new_service_type(self, interface, protocol, type, domain):
        global service_browsers

        # Are we already browsing this domain for this type? 
        if service_browsers.has_key((interface, protocol, type, domain)):
            return
        
        print "Browsing for services of type '%s' in domain '%s' on %i.%i ..." % (type, domain, interface, protocol)
        
        b = dbus.Interface(self.bus.get_object(avahi.DBUS_NAME, self.server.ServiceBrowserNew(interface, protocol, type, domain)),  avahi.DBUS_INTERFACE_SERVICE_BROWSER)
        b.connect_to_signal('ItemNew', self.new_service)
        b.connect_to_signal('ItemRemove', self.remove_service)

        service_browsers[(interface, protocol, type, domain)] = b

    def browse_domain(self, interface, protocol, domain):
        global service_type_browsers

        # Are we already browsing this domain?
        if service_type_browsers.has_key((interface, protocol, domain)):
            return
            
        print "Browsing domain '%s' on %i.%i ..." % (domain, interface, protocol)
        
        b = dbus.Interface(self.bus.get_object(avahi.DBUS_NAME, self.server.ServiceTypeBrowserNew(interface, protocol, domain)),  avahi.DBUS_INTERFACE_SERVICE_TYPE_BROWSER)
        b.connect_to_signal('ItemNew', self.new_service_type)

        service_type_browsers[(interface, protocol, domain)] = b

    def new_domain(self,interface, protocol, domain):
        self.browse_domain(interface, protocol, domain)
        if self.zc_ifaces.has_key((interface,protocol)) == False:
            self.zc_ifaces[(interface,protocol)] = self.insert_row(self.treemodel, None, str(self.siocgifname(interface))+" "+str(self.protoname(protocol)),None,interface,protocol,None,domain)
        if self.zc_domains.has_key((interface,protocol,domain)) == False:
            self.zc_domains[(interface,protocol,domain)] = self.insert_row(self.treemodel, self.zc_ifaces[(interface,protocol)], domain,None,interface,protocol,None,domain)

    def update_label(self,interface, protocol, name, type, domain, host, aprotocol, address, port, txt):
        infos = "<b>Service Type:</b> %s\n<b>Service Name:</b> %s\n<b>Domain Name:</b> %s\n<b>Interface:</b> %s %s\n<b>Address:</b> %s/%s:%i\n<b>TXT Data:</b> %s" % (type, name, domain, self.siocgifname(interface), self.protoname(protocol), host, address, port, str(txt))
        self.info_label.set_markup(infos)

    def insert_row(self, model,parent,
                   content, name, interface,protocol,type,domain):
        myiter=model.insert_after(parent,None)
        model.set(myiter,0,content,1,name,2,interface,3,protocol,4,type,5,domain)
        return myiter
    
    def new(self):
        print "A new main_window has been created"
        self.treemodel=gtk.TreeStore(gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING)
        self.tree_view.set_model(self.treemodel)

        #creating the columns headers
        self.tree_view.set_headers_visible(False)
        renderer=gtk.CellRendererText()
        column=gtk.TreeViewColumn("",renderer, text=0)
        column.set_resizable(True)
        column.set_sizing("GTK_TREE_VIEW_COLUMN_GROW_ONLY");
        column.set_expand(True);
        self.tree_view.append_column(column)

        # 
        self.zc_ifaces = {}
        self.zc_domains = {}
        self.zc_types = {}
        self.services_browsed = {}
        
        self.bus = dbus.SystemBus()
        self.server = dbus.Interface(self.bus.get_object(avahi.DBUS_NAME, avahi.DBUS_PATH_SERVER), avahi.DBUS_INTERFACE_SERVER)

        # browse all domains
        db = dbus.Interface(self.bus.get_object(avahi.DBUS_NAME, self.server.DomainBrowserNew(avahi.IF_UNSPEC, avahi.PROTO_UNSPEC, "", avahi.DOMAIN_BROWSER_BROWSE)), avahi.DBUS_INTERFACE_DOMAIN_BROWSER)
        db.connect_to_signal('ItemNew', self.new_domain)

        # Just browse the domain the user wants us to browse
        #self.browse_domain(avahi.IF_UNSPEC, avahi.PROTO_UNSPEC, domain)


        
def main():
    main_window = Main_window()

    main_window.run()
    
if __name__ == "__main__":
    main()

                                            
